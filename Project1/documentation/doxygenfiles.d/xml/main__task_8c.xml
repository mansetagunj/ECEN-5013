<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="main__task_8c" kind="file" language="C++">
    <compoundname>main_task.c</compoundname>
    <includes local="no">pthread.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">mqueue.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">errno.h</includes>
    <includes refid="main__task_8h" local="yes">main_task.h</includes>
    <includes refid="error__data_8h" local="yes">error_data.h</includes>
    <includes refid="logger__task_8h" local="yes">logger_task.h</includes>
    <includes refid="socket__task_8h" local="yes">socket_task.h</includes>
    <includes refid="light__sensor__task_8h" local="yes">light_sensor_task.h</includes>
    <includes refid="temperature__sensor__task_8h" local="yes">temperature_sensor_task.h</includes>
    <includes refid="my__signals_8h" local="yes">my_signals.h</includes>
    <includes refid="posixTimer_8h" local="yes">posixTimer.h</includes>
    <includes refid="common__helper_8h" local="yes">common_helper.h</includes>
    <includes refid="readConfiguration_8h" local="yes">readConfiguration.h</includes>
    <incdepgraph>
      <node id="799">
        <label>sys/stat.h</label>
      </node>
      <node id="803">
        <label>main_task.h</label>
        <link refid="main__task_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
      </node>
      <node id="808">
        <label>stdint.h</label>
      </node>
      <node id="816">
        <label>stdlib.h</label>
      </node>
      <node id="822">
        <label>temperature_sensor_task.h</label>
        <link refid="temperature__sensor__task_8h"/>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
      </node>
      <node id="817">
        <label>my_time.h</label>
        <link refid="my__time_8h"/>
      </node>
      <node id="815">
        <label>logger_task.h</label>
        <link refid="logger__task_8h"/>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
      </node>
      <node id="796">
        <label>/home/gunj/repos/ECEN-5013/Project1/src/main_task.c</label>
        <link refid="main_task.c"/>
        <childnode refid="797" relation="include">
        </childnode>
        <childnode refid="798" relation="include">
        </childnode>
        <childnode refid="799" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="805" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
      </node>
      <node id="802">
        <label>errno.h</label>
      </node>
      <node id="798">
        <label>fcntl.h</label>
      </node>
      <node id="800">
        <label>mqueue.h</label>
      </node>
      <node id="812">
        <label>error_data.h</label>
        <link refid="error__data_8h"/>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
      </node>
      <node id="805">
        <label>posixTimer.h</label>
        <link refid="posixTimer_8h"/>
        <childnode refid="806" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
      </node>
      <node id="818">
        <label>socket_task.h</label>
        <link refid="socket__task_8h"/>
        <childnode refid="811" relation="include">
        </childnode>
      </node>
      <node id="797">
        <label>pthread.h</label>
      </node>
      <node id="809">
        <label>sys/types.h</label>
      </node>
      <node id="801">
        <label>string.h</label>
      </node>
      <node id="804">
        <label>common_helper.h</label>
        <link refid="common__helper_8h"/>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="797" relation="include">
        </childnode>
        <childnode refid="805" relation="include">
        </childnode>
      </node>
      <node id="810">
        <label>unistd.h</label>
      </node>
      <node id="821">
        <label>semaphore.h</label>
      </node>
      <node id="811">
        <label>signal.h</label>
      </node>
      <node id="823">
        <label>my_signals.h</label>
        <link refid="my__signals_8h_source"/>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
      </node>
      <node id="824">
        <label>readConfiguration.h</label>
        <link refid="readConfiguration_8h"/>
      </node>
      <node id="806">
        <label>time.h</label>
      </node>
      <node id="819">
        <label>light_sensor_task.h</label>
        <link refid="light__sensor__task_8h"/>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
      </node>
      <node id="807">
        <label>linux/types.h</label>
      </node>
      <node id="813">
        <label>sys/syscall.h</label>
      </node>
      <node id="814">
        <label>stdio.h</label>
      </node>
      <node id="820">
        <label>sensor_common_object.h</label>
        <link refid="sensor__common__object_8h"/>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="main__task_8c_1a1a9425a70b0e461731a6efec6743ef38" prot="public" static="no">
        <name>MQ_MAINTASK_NAME</name>
        <initializer>&quot;/maintask_queue&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="27" column="9" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main__task_8c_1a395963a0c067171917cf7c8761ee2441" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>volatile int timeoutflag</definition>
        <argsstring></argsstring>
        <name>timeoutflag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="29" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main__task_8c_1adc2fe82289a6853a03c1f0629086f996" prot="public" static="no" mutable="no">
        <type>sig_atomic_t</type>
        <definition>volatile sig_atomic_t signal_exit</definition>
        <argsstring></argsstring>
        <name>signal_exit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="30" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main__task_8c_1af5d4df1bffe487c45323aa4f523d8f31" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>volatile int aliveStatus[NUM_CHILD_THREADS]</definition>
        <argsstring>[NUM_CHILD_THREADS]</argsstring>
        <name>aliveStatus</name>
        <initializer>= {0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="31" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main__task_8c_1ad7ff46799bfd789e2ac6fd5d6cb83ab1" prot="public" static="no" mutable="no">
        <type>void *(*</type>
        <definition>void*(* thread_callbacks[NUM_CHILD_THREADS])(void *)</definition>
        <argsstring>[NUM_CHILD_THREADS])(void *)</argsstring>
        <name>thread_callbacks</name>
        <initializer>=
{
    <ref refid="logger__task_8h_1a7322e57eb5c8763112ad4d4a946601bf" kindref="member">logger_task_callback</ref>,
    <ref refid="temperature__sensor__task_8h_1abc96664d611b8a19036cf6fcaaf92ac8" kindref="member">temperature_task_callback</ref>,
    <ref refid="socket__task_8h_1a11efeb37f1a462e32c153a30ba11f53a" kindref="member">socket_task_callback</ref>,
    <ref refid="light__sensor__task_8h_1a638f4ba787ad818d90477af9e572771c" kindref="member">light_task_callback</ref>,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="33" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main__task_8c_1afe1c004fcb8099601f20c376c229b787" prot="public" static="yes" mutable="no">
        <type>mqd_t</type>
        <definition>mqd_t maintask_q</definition>
        <argsstring></argsstring>
        <name>maintask_q</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="42" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main__task_8c_1a5a2cb997ac731840ca1dbea80f7ba042" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void signal_handler</definition>
        <argsstring>(int signal)</argsstring>
        <name>signal_handler</name>
        <param>
          <type>int</type>
          <declname>signal</declname>
        </param>
        <briefdescription>
<para>Signal handler for the main task Should not include stdout log in the handler as it is not thread safe. Find an alternative for this Maybe use a global atomic type to set the signal type after cancelling all the thereads and check that atomic data in the main_task after the join call if a signal occured and then use a stdout log there. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signal</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="52" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="52" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="main__task_8c_1a93c07eea63d11538e1e80879e6c8434a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void timer_handler_setup</definition>
        <argsstring>(union sigval sig)</argsstring>
        <name>timer_handler_setup</name>
        <param>
          <type>union sigval</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Timer handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sigval</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="90" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="main__task_8c_1a3577bae6a6888a65953912af0fbbcaa0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void timer_handler_aliveStatusCheck</definition>
        <argsstring>(union sigval sig)</argsstring>
        <name>timer_handler_aliveStatusCheck</name>
        <param>
          <type>union sigval</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="101" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="101" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="main__task_8c_1ad539583e28fb9162099dfd54fc34afc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mqd_t</type>
        <definition>mqd_t getHandle_MainTaskQueue</definition>
        <argsstring>()</argsstring>
        <name>getHandle_MainTaskQueue</name>
        <briefdescription>
<para>Get the Handle MainTaskQueue object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>mqd_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="139" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="main__task_8c_1a697f1beded418be5281745091d785ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main_task_init</definition>
        <argsstring>()</argsstring>
        <name>main_task_init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="144" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="144" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="main__task_8c_1ad7696571b325eb7098a8d31ce3421ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void main_task_processMsg</definition>
        <argsstring>()</argsstring>
        <name>main_task_processMsg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="159" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="159" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="main__task_8c_1a27a16a28c2a8f0448f7cbdb28adf50d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void POST_EXIT_MESSAGE_ALL</definition>
        <argsstring>()</argsstring>
        <name>POST_EXIT_MESSAGE_ALL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="199" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="199" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="main__task_8c_1a52c4c165f42a1ca113ba4bd55b00a293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main_task_entry</definition>
        <argsstring>()</argsstring>
        <name>main_task_entry</name>
        <briefdescription>
<para>entry point for the main task </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" line="210" column="1" bodyfile="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c" bodystart="210" bodyend="309"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Gunj Manseta </para></simplesect>
<simplesect kind="date"><para>2018-03-09 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>O_*<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>mode<sp/>constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mqueue.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="main__task_8h" kindref="compound">main_task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="error__data_8h" kindref="compound">error_data.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger__task_8h" kindref="compound">logger_task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="socket__task_8h" kindref="compound">socket_task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="light__sensor__task_8h" kindref="compound">light_sensor_task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="temperature__sensor__task_8h" kindref="compound">temperature_sensor_task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;my_signals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="posixTimer_8h" kindref="compound">posixTimer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common__helper_8h" kindref="compound">common_helper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="readConfiguration_8h" kindref="compound">readConfiguration.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MQ_MAINTASK_NAME<sp/>&quot;/maintask_queue&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeoutflag;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>sig_atomic_t<sp/>signal_exit;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aliveStatus[NUM_CHILD_THREADS]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>(*thread_callbacks[NUM_CHILD_THREADS])(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>=</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger__task_8c_1a7322e57eb5c8763112ad4d4a946601bf" kindref="member">logger_task_callback</ref>,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="temperature__sensor__task_8c_1abc96664d611b8a19036cf6fcaaf92ac8" kindref="member">temperature_task_callback</ref>,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="socket__task_8c_1a11efeb37f1a462e32c153a30ba11f53a" kindref="member">socket_task_callback</ref>,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="light__sensor__task_8c_1a638f4ba787ad818d90477af9e572771c" kindref="member">light_task_callback</ref>,</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>mqd_t<sp/>maintask_q;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>signal_handler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signal)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(signal)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGUSR1:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(SIGNAL<sp/></highlight><highlight class="stringliteral">&quot;SIGUSR1<sp/>signal.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGUSR2:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(SIGNAL<sp/></highlight><highlight class="stringliteral">&quot;SIGUSR2<sp/>signal.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGINT:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(SIGNAL<sp/></highlight><highlight class="stringliteral">&quot;SIGINT<sp/>signal.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGTERM:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(SIGNAL<sp/></highlight><highlight class="stringliteral">&quot;SIGTERM<sp/>signal.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGTSTP:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(SIGNAL<sp/></highlight><highlight class="stringliteral">&quot;SIGTSTP<sp/>signal.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(SIGNAL<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>signal.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cancelling<sp/>all<sp/>the<sp/>threads<sp/>for<sp/>any<sp/>signals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_CHILD_THREADS;<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>pthread_cancel(pthread_id[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>signal_exit<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>timer_handler_setup(</highlight><highlight class="keyword">union</highlight><highlight class="normal"><sp/>sigval<sp/>sig)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(1<sp/>==<sp/>timeoutflag)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;TIMEOUT.<sp/>App<sp/>could<sp/>not<sp/>be<sp/>setup<sp/>in<sp/>time\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeoutflag=0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="posixTimer_8c_1a91f15230e46caba2a2132b04e9c73e47" kindref="member">delete_timer</ref>(*(timer_t*)sig.sival_ptr);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>timer_handler_aliveStatusCheck(</highlight><highlight class="keyword">union</highlight><highlight class="normal"><sp/>sigval<sp/>sig)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!aliveStatus[LOGGER_TASK_ID]<sp/>&amp;&amp;<sp/>!aliveStatus[LIGHT_TASK_ID]<sp/>&amp;&amp;<sp/>!aliveStatus[TEMPERATURE_TASK_ID])</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;aliveState_lock);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aliveStatus[LOGGER_TASK_ID]++;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aliveStatus[LIGHT_TASK_ID]++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aliveStatus[TEMPERATURE_TASK_ID]++;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;aliveState_lock);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger__task_8h_1a006cfbef67bbc2a8a43363fb6aab41e9" kindref="member">DEFINE_LOG_STRUCT</ref>(logstruct,LT_MSG_TASK_STATUS,MAIN_TASK_ID);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="light__sensor__task_8h_1ad3c64139927109ac2021342f1912828b" kindref="member">DEFINE_LIGHT_STRUCT</ref>(lightstruct,LIGHT_MSG_TASK_STATUS,MAIN_TASK_ID)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="temperature__sensor__task_8h_1a9b5251efca0e6cd5011d8f5c2120663c" kindref="member">DEFINE_TEMP_STRUCT</ref>(tempstruct,TEMP_MSG_TASK_STATUS,MAIN_TASK_ID)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POST_MESSAGE_LOGTASK(&amp;logstruct,&quot;Send<sp/>Alive<sp/>status&quot;);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POST_MESSAGE_LIGHTTASK(&amp;lightstruct);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POST_MESSAGE_TEMPERATURETASK(&amp;tempstruct);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;One<sp/>of<sp/>the<sp/>task<sp/>not<sp/>alive\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="posixTimer_8c_1a33e0f810c8ecdcde8340650106da0958" kindref="member">stop_timer</ref>(*(timer_t*)sig.sival_ptr);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="posixTimer_8c_1a91f15230e46caba2a2132b04e9c73e47" kindref="member">delete_timer</ref>(*(timer_t*)sig.sival_ptr);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cancelling<sp/>all<sp/>the<sp/>threads<sp/>for<sp/>any<sp/>signals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_CHILD_THREADS;<sp/>i++)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>VALUES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;Child<sp/>thread<sp/>cancelled:<sp/>%d<sp/>%s\n&quot;</highlight><highlight class="normal">,i,<sp/>getTaskIdentfierString(i));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pthread_cancel(pthread_id[i]))</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;Child<sp/>thread<sp/>cancelled<sp/>failed:<sp/>%d\n&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>VALUES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>child<sp/>thread<sp/>cancelled\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Signaling<sp/>main<sp/>task<sp/>to<sp/>quit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal_exit<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="main__task_8h_1ad539583e28fb9162099dfd54fc34afc8" refkind="member"><highlight class="normal">mqd_t<sp/><ref refid="main__task_8c_1ad539583e28fb9162099dfd54fc34afc8" kindref="member">getHandle_MainTaskQueue</ref>()</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maintask_q;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main_task_init()</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mq_attr<sp/>maintaskQ_attr<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mq_msgsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structMAINTASKQ__MSG__T" kindref="compound">MAINTASKQ_MSG_T</ref>),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mq_maxmsg<sp/>=<sp/>32,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mq_flags<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.mq_curmsgs<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>mq_unlink(MQ_MAINTASK_NAME);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>maintask_q<sp/>=<sp/>mq_open(MQ_MAINTASK_NAME,<sp/>O_CREAT<sp/>|<sp/>O_RDWR,<sp/>0666,<sp/>&amp;maintaskQ_attr);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maintask_q;;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>main_task_processMsg()</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret,prio;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMAINTASKQ__MSG__T" kindref="compound">MAINTASKQ_MSG_T</ref><sp/>queueData<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>recv_timeout<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!signal_exit)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;queueData,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(queueData));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;recv_timeout);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recv_timeout.tv_sec<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>mq_timedreceive(maintask_q,(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;(queueData),</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(queueData),&amp;prio,&amp;recv_timeout);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ERR<sp/>==<sp/>ret<sp/>&amp;&amp;<sp/>ETIMEDOUT<sp/>==<sp/>errno)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ERR<sp/>==<sp/>ret)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;MAIN<sp/>TASK:MQ_RECV:%s\n&quot;</highlight><highlight class="normal">,strerror(errno));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(queueData.msgID)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal">(MT_MSG_STATUS_RSP):</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>STDOUT_ALIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;ALIVE:%s\n&quot;</highlight><highlight class="normal">,getTaskIdentfierString(queueData.sourceID));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(&amp;aliveState_lock);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aliveStatus[queueData.sourceID]--;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(&amp;aliveState_lock);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Main<sp/>task<sp/>queue<sp/>id\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;MAIN<sp/>TASK<sp/>GOT<sp/>EXIT\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>POST_EXIT_MESSAGE_ALL()</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger__task_8h_1a006cfbef67bbc2a8a43363fb6aab41e9" kindref="member">DEFINE_LOG_STRUCT</ref>(logstruct,LT_MSG_TASK_EXIT,MAIN_TASK_ID);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="light__sensor__task_8h_1ad3c64139927109ac2021342f1912828b" kindref="member">DEFINE_LIGHT_STRUCT</ref>(lightstruct,LIGHT_MSG_TASK_EXIT,MAIN_TASK_ID)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="temperature__sensor__task_8h_1a9b5251efca0e6cd5011d8f5c2120663c" kindref="member">DEFINE_TEMP_STRUCT</ref>(tempstruct,TEMP_MSG_TASK_EXIT,MAIN_TASK_ID)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>POST_MESSAGE_LIGHTTASK_EXIT(&amp;lightstruct);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>POST_MESSAGE_TEMPERATURETASK_EXIT(&amp;tempstruct);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>POST_MESSAGE_LOGTASK_EXIT(&amp;logstruct,</highlight><highlight class="stringliteral">&quot;FIRE<sp/>IN<sp/>THE<sp/>HOLE.<sp/>EXIT<sp/>EXIT!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cancel(pthread_id[SOCKET_TASK_ID]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="main__task_8h_1a52c4c165f42a1ca113ba4bd55b00a293" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main__task_8c_1a52c4c165f42a1ca113ba4bd55b00a293" kindref="member">main_task_entry</ref>()</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Making<sp/>the<sp/>timeout<sp/>flag<sp/>true,<sp/>this<sp/>should<sp/>be<sp/>unset=false<sp/>within<sp/>5<sp/>sec<sp/>else<sp/>the<sp/>timer<sp/>checking<sp/>the<sp/>operation<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>will<sp/>send<sp/>a<sp/>kill<sp/>signal<sp/>and<sp/>the<sp/>app<sp/>will<sp/>close</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>is<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>barrier<sp/>is<sp/>passed<sp/>within<sp/>5<sp/>secs.<sp/>Extra<sp/>safety<sp/>feature<sp/>which<sp/>might<sp/>not<sp/>be<sp/>neccessary<sp/>at<sp/>all.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>timeoutflag<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>signal_exit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>main_task_init();<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(-1<sp/>==<sp/>ret)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;MAIN<sp/>TASK<sp/>INIT:%s\n&quot;</highlight><highlight class="normal">,strerror(errno));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="readConfiguration_8c_1af04c65a7de574da1abe2b9bd0f403c64" kindref="member">configdata_setup</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>setup<sp/>data<sp/>from<sp/>config<sp/>file\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mutex<sp/>init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_init(&amp;aliveState_lock,<sp/>NULL);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Registering<sp/>a<sp/>timer<sp/>for<sp/>5<sp/>sec<sp/>to<sp/>check<sp/>that<sp/>the<sp/>barrier<sp/>is<sp/>passed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>timer_t<sp/>timer_id;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ERR<sp/>==<sp/><ref refid="common__helper_8c_1a23124253b968391b9777fc3b8a0cc5ec" kindref="member">register_and_start_timer</ref>(&amp;timer_id,<sp/>2*MICROSEC,<sp/>1,<sp/>timer_handler_setup,<sp/>&amp;timer_id))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LOG_STDOUT(ERROR<sp/>&quot;Timer<sp/>Error\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ERR;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>barrier<sp/>for<sp/>all<sp/>the<sp/>threads<sp/>+<sp/>the<sp/>main<sp/>task*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_barrier_init(&amp;tasks_barrier,NULL,NUM_CHILD_THREADS+1);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>sa;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Registering<sp/>the<sp/>signal<sp/>callback<sp/>handler*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>register_signalHandler(&amp;sa,signal_handler,<sp/>REG_SIG_ALL);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>all<sp/>the<sp/>child<sp/>threads<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_CHILD_THREADS;<sp/>i++)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>pthread_create(&amp;pthread_id[i],NULL,thread_callbacks[i],NULL);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;Pthread<sp/>create:%d:%s\n&quot;</highlight><highlight class="normal">,i,strerror(errno));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;MAIN<sp/>TASK<sp/>INIT<sp/>COMPLETED\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_barrier_wait(&amp;tasks_barrier);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Resetting<sp/>the<sp/>timeoutflag<sp/>as<sp/>we<sp/>are<sp/>pass<sp/>the<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>timeoutflag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=<sp/><ref refid="posixTimer_8c_1a33e0f810c8ecdcde8340650106da0958" kindref="member">stop_timer</ref>(timer_id);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ERR<sp/>==<sp/>ret)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;MAIN<sp/>TASK<sp/>CANNOT<sp/>STOP<sp/>TIMER:%s\n&quot;</highlight><highlight class="normal">,strerror(errno));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ERR;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>==<sp/><ref refid="posixTimer_8c_1a91f15230e46caba2a2132b04e9c73e47" kindref="member">delete_timer</ref>(timer_id);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ERR<sp/>==<sp/>ret)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;MAIN<sp/>TASK<sp/>CANNOT<sp/>DELETE<sp/>TIMER:%s\n&quot;</highlight><highlight class="normal">,strerror(errno));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ERR<sp/>==<sp/><ref refid="common__helper_8c_1a23124253b968391b9777fc3b8a0cc5ec" kindref="member">register_and_start_timer</ref>(&amp;timer_id,<sp/>5*MICROSEC,<sp/>0<sp/>,timer_handler_aliveStatusCheck,<sp/>&amp;timer_id))</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LOG_STDOUT(ERROR<sp/>&quot;Timer<sp/>Start<sp/>Error\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ERR;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>message<sp/>processing<sp/>which<sp/>is<sp/>a<sp/>blocking<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>main_task_processMsg();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="posixTimer_8c_1a91f15230e46caba2a2132b04e9c73e47" kindref="member">delete_timer</ref>(timer_id);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>POST_EXIT_MESSAGE_ALL();</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUM_CHILD_THREADS;<sp/>i++)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retThread<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>LOG_STDOUT(INFO<sp/>&quot;Pthread<sp/>JOIN:%d\n&quot;,i);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>pthread_join(pthread_id[i],(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;retThread);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>LOG_STDOUT(INFO<sp/>&quot;ThreadID<sp/>%d:<sp/>Ret:%d\n&quot;,i,retThread);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret<sp/><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_STDOUT(ERROR<sp/></highlight><highlight class="stringliteral">&quot;Pthread<sp/>join:%d:%s\n&quot;</highlight><highlight class="normal">,i,strerror(errno));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_destroy(&amp;aliveState_lock);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="readConfiguration_8c_1a93341cc941d5255d844aea3b49cdfc9e" kindref="member">configdata_flush</ref>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG_STDOUT(INFO<sp/></highlight><highlight class="stringliteral">&quot;GOODBYE<sp/>CRUEL<sp/>WORLD!!!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/gunj/repos/ECEN-5013/Project1/src/main_task.c"/>
  </compounddef>
</doxygen>
